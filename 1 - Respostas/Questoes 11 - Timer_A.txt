1. Defina a função void Atraso(volatile unsigned int x); que fornece um atraso de 'x' milissegundos. Utilize o Timer_A para a contagem de tempo, e assuma que o SMCLK já foi configurado para funcionar a 1 MHz. Esta função poderá ser utilizada diretamente nas outras questões desta prova.
#include <msp430.h> 


void Atraso(volatile unsigned int x)
{
    TACCR0= 1000-1;
    TACTL |= TACLR;
    TACTL = TASSEL_2 + ID_3 + MC_1;
    while (x>0)
    {x--;
    while((TACTL & TAIFG)==0);
    {TACTL &=~TAIFG;}
}
}
int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    return 0;
}

2. Pisque os LEDs da Launchpad numa frequência de 100 Hz.
#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TACCR0=5000-1;
    TACTL = TASSEL_2 + ID_1+ MC_1;
            while (1){
                while ((TACTL&TAIFG)==0);
                P1OUT^=LEDS;
                TACTL &=~TAIFG;
            }
    return 0;
}

3. Pisque os LEDs da Launchpad numa frequência de 20 Hz.
#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TACCR0=25000-1;
    TACTL = TASSEL_2 + ID_1+ MC_1;
            while (1){
                while ((TACTL&TAIFG)==0);
                P1OUT^=LEDS;
                TACTL &=~TAIFG;
            }
    return 0;
}

4. Pisque os LEDs da Launchpad numa frequência de 1 Hz.
#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TACCR0=62500-1;
    TACTL = TASSEL_2 + ID_3+ MC_1;
            while (1){
                while ((TACTL&TAIFG)==0);
                P1OUT^=LEDS;
                TACTL &=~TAIFG;
            }
    return 0;
}
5. Pisque os LEDs da Launchpad numa frequência de 0,5 Hz.
Questão 2:
#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TACCR0=62500-1;
    TACTL = TASSEL_2 + ID_3+ MC_3;
            while (1){
                while ((TACTL&TAIFG)==0);
                P1OUT^=LEDS;
                TACTL &=~TAIFG;
            }
    return 0;
}

6. Repita as questões 2 a 5 usando a interrupção do Timer A para acender ou apagar os LEDs.

#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TA0CCR0=5000-1;
    TA0CTL = TASSEL_2 + ID_3+ MC_1 +TAIE;
    _BIS_SR(LPM0_bits+GIE);
    return 0;}

enable_interrupt();

#pragma vector = TIMER0_A1_VECTOR

__interrupt void TA0_ISR(void)
        {
    P1OUT ^=LEDS;
    TA0CTL &=~TAIFG;
        }

Questão 5:

#include <msp430.h> 
#define LED1 BIT0
#define LED2 BIT6
#define LEDS (BIT0 + BIT6)


int main (void){
    WDTCTL = WDTPW + WDTHOLD;

    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1OUT&=~LEDS;
    P1DIR|=LEDS;
    TA0CCR0=62500-1;
    TA0CTL = TASSEL_2 + ID_3+ MC_3 +TAIE;
    _BIS_SR(LPM0_bits+GIE);
    return 0;}

enable_interrupt();

#pragma vector = TIMER0_A1_VECTOR

__interrupt void TA0_ISR(void)
        {
    P1OUT ^=LEDS;
    TA0CTL &=~TAIFG;
        }

7. Defina a função void paralelo_para_serial(void); que lê o byte de entrada via porta P1 e transmite os bits serialmente via pino P2.0. Comece com um bit em nivel alto, depois os bits na ordem P1.0 - P1.1 - … - P1.7 e termine com um bit em nível baixo. Considere um período de 1 ms entre os bits.
#include <msp430.h> 


void Atraso(volatile unsigned int x)
{
    TACCR0= 1000-1;
    TACTL |= TACLR;
    TACTL = TASSEL_2 + ID_0 + MC_1;
    while (x>0)
    {x--;
    while((TACTL & TAIFG)==0);
    {TACTL &=~TAIFG;}
}
    TACTL = MC_0;
}

void paralelo_para_serial(void)
{
    int i, A;
    A = P1IN;
    P1OUT |= BIT0;
    Atraso(1);
    for (i=0; i<8; i++)
    {
        P2OUT=A;
        Atraso(1);
        (A>>i);
    }
}

int main(void){
    WDTCTL = WDTPW + WDTHOLD;
    BCSCTL1 = CALBC1_1MHZ;
    DCOCTL = CALDCO_1MHZ;
    P1DIR = 0;
    P2OUT = 0;
    P2DIR |= BIT0;
    while (1)
    {
        paralelo_para_serial();
    }
    return 0;
}


8. Faça o programa completo que lê um byte de entrada serialmente via pino P2.0 e transmite este byte via porta P1. O sinal serial começa com um bit em nivel alto, depois os bits na ordem 0-7 e termina com um bit em nível baixo. Os pinos P1.0-P1.7 deverão corresponder aos bits 0-7, respectivamente. Considere um período de 1 ms entre os bits.

9. Defina a função void ConfigPWM(volatile unsigned int freqs, volatile unsigned char ciclo_de_trabalho); para configurar e ligar o Timer_A em modo de comparação. Considere que o pino P1.6 já foi anteriormente configurado como saída do canal 1 de comparação do Timer_A, que somente os valores {100, 200, 300, …, 1000} Hz são válidos para a frequência, que somente os valores {0, 25, 50, 75, 100} % são válidos para o ciclo de trabalho, e que o sinal de clock SMCLK do MSP430 está operando a 1 MHz.