1 - Dada uma variável a do tipo char (um byte), escreva os trechos de código em C para: 
(a) Somente setar o bit menos significativo de a. 

    int main{
    char a, resultado;
    resultado <= a || "00000001";
    return 0;
    }
    
(b) Somente setar dois bits de a: o menos significativo e o segundo menos significativo. 

    int main{
    char a, resultado;
    resultado <= a || "00000011";
    return 0;
    }
    
(c) Somente zerar o terceiro bit menos significativo de a. 

    int main{
    char a, resultado;
    resultado <= a && "11111110";
    return 0;
    }
    
(d) Somente zerar o terceiro e o quarto bits menos significativo de a. 

    int main{
    char a, resultado;
    resultado <= a && "11110011";
    return 0;
    }
    
(e) Somente inverter o bit mais significativo de a. 

    int main{
    char a, resultado;
    resultado <= a ^ "10000000";
    return 0;
    }
    
(f) Inverter o nibble mais significativo de a, e setar o nibble menos significativo de a.
  
  int main{
    char a, resultado;
    resultado <= a ^ "11110000";
    resultado <= resultado || "00001111";
    return 0;
    }
    
2 - Considerando a placa Launchpad do MSP430, escreva o código em C para piscar os dois LEDs ininterruptamente.
  
    #include <msp430g2553.h>
    #define LED1 BIT0
    #define LED2 BIT6
    #define LEDS (LED1|LED2)

    void atraso(volatile unsigned int i)
    {
        while((i--)>0);
    }

    int main(void)
    {
        WDTCTL = WDTPW | WDTHOLD;
        P1OUT |= LEDS;
        P1DIR |= LEDS;
        while(1)
        {
            atraso(0xffff);
            P1OUT ^= LEDS;
        }
        return 0;
    }

3 - Considerando a placa Launchpad do MSP430, escreva o código em C para piscar duas vezes os dois LEDs sempre que o usuário pressionar o botão.

    #include <msp430g2553.h>
    #define LED1 BIT0
    #define LED2 BIT6
    #define LEDS (LED1|LED2)
    #define BTN  BIT3

    void atraso(volatile unsigned int i)
    {
        while((i--)>0);
    }

    int main(void)
    {
        WDTCTL = WDTPW | WDTHOLD;
        P1OUT |= LEDS;
        P1DIR |= LEDS;
        P1DIR &= ~BTN;
        P1REN |= BTN;
        P1OUT |= BTN;
        int i;

        while(1)
        {
            if((P1IN&BTN)==0)
               for(i=0; i<4; i++){
                    P1OUT ^= LEDS;
                    atraso(0xffff);

                                   }
            else
                P1OUT &= ~LEDS;
        }
        return 0;
    }

4 - Considerando a placa Launchpad do MSP430, faça uma função em C que pisca os dois LEDs uma vez.

    #include <msp430g2553.h>
    #define LED1 BIT0
    #define LED2 BIT6
    #define LEDS (LED1|LED2)

    void atraso(volatile unsigned int i)
    {
        while((i--)>0);
    }

    int main(void)
    {
        WDTCTL = WDTPW | WDTHOLD;
        P1OUT |= LEDS;
        P1DIR |= LEDS;
        P1OUT |= LEDS;
        atraso(0xffff);
        P1OUT &= ~LEDS;
        return 0;
    }


5 - Reescreva o código da questão 2 usando a função da questão 4.

    #include <msp430g2553.h>
    #define LED1 BIT0
    #define LED2 BIT6
    #define LEDS (LED1|LED2)

    void atraso(volatile unsigned int i)
    {
        while((i--)>0);
    }

    int main(void)
    {
        while(1){
        WDTCTL = WDTPW | WDTHOLD;
        P1OUT |= LEDS;
        P1DIR |= LEDS;
        P1OUT |= LEDS;
        atraso(0xffff);
        P1OUT &= ~LEDS;
        atraso(0xffff);
        }
        return 0;
    }

6 - Reescreva o código da questão 3 usando a função da questão 4.

 #include <msp430g2553.h>
    #define LED1 BIT0
    #define LED2 BIT6
    #define LEDS (LED1|LED2)
    #define BTN  BIT3

    void atraso(volatile unsigned int i)
    {
        while((i--)>0);
    }

    int main(void)
    {
        while(1){

        WDTCTL = WDTPW | WDTHOLD;
        P1DIR |= LEDS;
        P1DIR &= ~BTN;
        P1REN |= BTN;
        P1OUT |= BTN;

        if((P1IN&BTN)==0){

            P1OUT |= LEDS;
            atraso(0xffff);
            P1OUT &= ~LEDS;
            atraso(0xffff);
            P1OUT |= LEDS;
            atraso(0xffff);
            P1OUT &= ~LEDS;
            atraso(0xffff);
        }
        else{
            P1OUT &= ~LEDS;
        }}
                         return 0;


    }

